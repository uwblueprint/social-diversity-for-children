generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CouponUsers {
  programId Int     @map("program_id")
  parentId  Int     @map("parent_id")
  couponId  String? @map("coupon_id")
  parent    Parent  @relation("coupon_usersToparents", fields: [parentId], references: [id])
  program   Program @relation("coupon_usersToprograms", fields: [programId], references: [id])

  @@id([parentId, programId])
  @@map("coupon_users")
}

model Parent {
  id                 Int               @id @default(autoincrement())
  first_name         String
  last_name          String
  phone_number       String            @db.VarChar(50)
  is_low_income      Boolean?          @default(false)
  address_line1      String
  address_line2      String?
  postal_code        String            @db.VarChar(10)
  city_name          String            @db.VarChar(50)
  province           provinces
  preferred_language locales
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  updated_at         DateTime          @default(now()) @db.Timestamptz(6)
  users              User              @relation("parentsTousers", fields: [id], references: [id])
  coupon_users       CouponUsers[]     @relation("coupon_usersToparents")
  parent_of_students ParentOfStudent[] @relation("parent_of_studentsToparents")
  parent_regs        ParentReg[]       @relation("parent_regsToparents")
  waitlists          Waitlist[]        @relation("parentsTowaitlists")

  @@map("parents")
}

model ParentOfStudent {
  parentId  Int      @map("parent_id")
  studentId Int      @map("student_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  parent    Parent   @relation("parent_of_studentsToparents", fields: [parentId], references: [id])
  student   Student  @relation("parent_of_studentsTostudents", fields: [studentId], references: [id])

  @@id([studentId, parentId])
  @@map("parent_of_students")
}

model ParentReg {
  parent_id  Int
  student_id Int
  class_id   Int
  is_valid   Boolean
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  classes    Class    @relation("parent_regsToclasses", fields: [class_id], references: [id])
  parents    Parent   @relation("parent_regsToparents", fields: [parent_id], references: [id])
  students   Student  @relation("parent_regsTostudents", fields: [student_id], references: [id])

  @@id([student_id, class_id])
  @@map("parent_regs")
}

model Program {
  id                   Int                 @id @default(autoincrement())
  price                Int
  online_format        program_formats
  tag                  String
  start_date           DateTime            @db.Timestamptz(6)
  end_date             DateTime            @db.Timestamptz(6)
  is_archived          Boolean             @default(false)
  created_at           DateTime            @default(now()) @db.Timestamptz(6)
  updated_at           DateTime            @default(now()) @db.Timestamptz(6)
  classes              Class[]             @relation("programsToclasses")
  coupon_users         CouponUsers[]       @relation("coupon_usersToprograms")
  program_translations ProgramTranslation? @relation("program_translationsToprograms")

  @@map("programs")
}

model ProgramTranslation {
  programId   Int      @id @map("program_id")
  name        String
  description String
  language    locale
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  program     Program  @relation("program_translationsToprograms", fields: [programId], references: [id])

  @@map("program_translations")
}

model Student {
  id               Int               @id @default(autoincrement())
  firstName        String            @map("first_name")
  lastName         String            @map("last_name")
  allergies        String
  additionalInfo   String?           @map("additional_info")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)
  parentOfStudents ParentOfStudent[] @relation("parent_of_studentsTostudents")
  parentRegs       ParentReg[]       @relation("parent_regsTostudents")

  @@map("students")
}

model Teacher {
  id           Int          @id @default(autoincrement())
  first_name   String
  last_name    String
  created_at   DateTime     @default(now()) @db.Timestamptz(6)
  updated_at   DateTime     @default(now()) @db.Timestamptz(6)
  users        User         @relation("teachersTousers", fields: [id], references: [id])
  teacher_regs TeacherReg[] @relation("teacher_regsToteachers")

  @@map("teachers")
}

model TeacherReg {
  teacher_id Int
  class_id   Int
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  classes    Class    @relation("classesToteacher_regs", fields: [class_id], references: [id])
  teachers   Teacher  @relation("teacher_regsToteachers", fields: [teacher_id], references: [id])

  @@id([class_id, teacher_id])
  @@map("teacher_regs")
}

model User {
  id             Int           @id @default(autoincrement())
  name           String?
  email          String?       @unique
  email_verified DateTime?     @db.Timestamptz(6)
  image          String?
  created_at     DateTime      @default(now()) @db.Timestamptz(6)
  updated_at     DateTime      @default(now()) @db.Timestamptz(6)
  parents        Parent?       @relation("parentsTousers")
  program_admins ProgramAdmin? @relation("program_adminsTousers")
  teachers       Teacher?      @relation("teachersTousers")
  volunteers     Volunteer?    @relation("usersTovolunteers")

  @@map("users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("verification_requests")
}

model Volunteer {
  id                   Int            @id @default(autoincrement())
  first_name           String
  last_name            String
  phone_number         String?        @db.VarChar(50)
  is_valid             Boolean?       @default(false)
  background_form_link String?
  address_line1        String?
  address_line2        String?
  postal_code          String?        @db.VarChar(10)
  city_name            String?
  province             provinces?
  preferred_language   locales?
  created_at           DateTime       @default(now()) @db.Timestamptz(6)
  updated_at           DateTime       @default(now()) @db.Timestamptz(6)
  users                User           @relation("usersTovolunteers", fields: [id], references: [id])
  volunteer_regs       VolunteerReg[] @relation("volunteer_regsTovolunteers")

  @@map("volunteers")
}

model VolunteerReg {
  volunteer_id Int
  class_id     Int
  is_valid     Boolean?  @default(false)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  classes      Class     @relation("classesTovolunteer_regs", fields: [class_id], references: [id])
  volunteers   Volunteer @relation("volunteer_regsTovolunteers", fields: [volunteer_id], references: [id])

  @@id([volunteer_id, class_id])
  @@map("volunteer_regs")
}

model ProgramAdmin {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  users      User     @relation("program_adminsTousers", fields: [id], references: [id])

  @@map("program_admins")
}

model ClassTranslation {
  class_id    Int      @id
  name        String
  description String?
  language    locales
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  classes     Class    @relation(fields: [class_id], references: [id])

  @@map("class_translations")
}

model Class {
  id                        Int               @id @default(autoincrement())
  name                      String?
  age_group                 String?
  program_id                Int
  space_total               Int
  space_available           Int
  volunteer_space_total     Int
  volunteer_space_available Int
  is_archived               Boolean           @default(false)
  start_date                DateTime          @db.Timestamptz(6)
  end_date                  DateTime          @db.Timestamptz(6)
  weekday                   weekdays
  start_time_minutes        Int
  duration_minutes          Int
  created_at                DateTime          @default(now()) @db.Timestamptz(6)
  updated_at                DateTime          @default(now()) @db.Timestamptz(6)
  programs                  Program           @relation("programsToclasses", fields: [program_id], references: [id])
  class_translations        ClassTranslation?
  parent_regs               ParentReg[]       @relation("parent_regsToclasses")
  teacher_regs              TeacherReg[]      @relation("classesToteacher_regs")
  volunteer_regs            VolunteerReg[]    @relation("classesTovolunteer_regs")
  waitlists                 Waitlist[]

  @@map("classes")
}

model Waitlist {
  class_id   Int
  parent_id  Int
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  classes    Class    @relation(fields: [class_id], references: [id])
  parents    Parent   @relation("parentsTowaitlists", fields: [parent_id], references: [id])

  @@id([parent_id, class_id])
  @@map("waitlists")
}

enum locales {
  zh
  en
  ja
  ko

   @@map("locales")
}

enum province {
  NL
  PE
  NS
  NB
  QC
  ON
  MB
  SK
  AB
  BC
  YT
  NT
  NU

   @@map("provinces")
}

enum weekday {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN

   @@map("weekdays")
}

enum programFormat {
  online
  inPerson @map("in-person")
  blended

   @@map("program_formats")
}

enum program_formats {
  online
  in_person @map("in-person")
  blended
}
