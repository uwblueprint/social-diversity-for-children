generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CouponUsers {
  program_id Int
  parent_id  Int
  coupon_id  String?
  parents    Parent  @relation("coupon_usersToparents", fields: [parent_id], references: [id])
  programs   Program @relation("coupon_usersToprograms", fields: [program_id], references: [id])

  @@id([parent_id, program_id])
  @@map("coupon_users")
}

model Parent {
  id                 Int               @id @default(autoincrement())
  user_id            Int
  first_name         String
  last_name          String
  phone_number       String            @db.VarChar(50)
  email              String            @unique
  is_low_income      Boolean?          @default(false)
  address_line1      String
  address_line2      String?
  postal_code        String            @db.VarChar(10)
  city_name          String            @db.VarChar(50)
  province           provinces
  preferred_language locales
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  updated_at         DateTime          @default(now()) @db.Timestamptz(6)
  users              User              @relation("parentsTousers", fields: [user_id], references: [id])
  coupon_users       CouponUsers[]     @relation("coupon_usersToparents")
  parent_of_students ParentOfStudent[] @relation("parent_of_studentsToparents")
  parent_regs        ParentReg[]       @relation("parent_regsToparents")
  program_waitlists  ProgramWaitlist[] @relation("parentsToprogram_waitlists")

  @@map("parents")
}

model ParentOfStudent {
  parent_id  Int
  student_id Int
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  parents    Parent   @relation("parent_of_studentsToparents", fields: [parent_id], references: [id])
  students   Student  @relation("parent_of_studentsTostudents", fields: [student_id], references: [id])

  @@id([student_id, parent_id])
  @@map("parent_of_students")
}

model ParentReg {
  parent_id  Int
  student_id Int
  program_id Int
  is_valid   Boolean
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  parents    Parent   @relation("parent_regsToparents", fields: [parent_id], references: [id])
  programs   Program  @relation("parent_regsToprograms", fields: [program_id], references: [id])
  students   Student  @relation("parent_regsTostudents", fields: [student_id], references: [id])

  @@id([student_id, program_id])
  @@map("parent_regs")
}

model Program {
  id                        Int                 @id @default(autoincrement())
  price                     Int
  start_date                DateTime            @db.Timestamptz(6)
  end_date                  DateTime            @db.Timestamptz(6)
  weekday                   weekdays
  start_time_minutes        Int
  duration_minutes          Int
  space_total               Int
  space_available           Int
  volunteer_space_total     Int
  volunteer_space_available Int
  is_archived               Boolean             @default(false)
  created_at                DateTime            @default(now()) @db.Timestamptz(6)
  updated_at                DateTime            @default(now()) @db.Timestamptz(6)
  coupon_users              CouponUsers[]       @relation("coupon_usersToprograms")
  parent_regs               ParentReg[]         @relation("parent_regsToprograms")
  program_translations      ProgramTranslation? @relation("program_translationsToprograms")
  program_waitlists         ProgramWaitlist[]   @relation("program_waitlistsToprograms")
  teacher_regs              TeacherReg[]        @relation("programsToteacher_regs")
  volunteer_regs            VolunteerReg[]      @relation("programsTovolunteer_regs")

  @@map("programs")
}

model ProgramTranslation {
  program_id  Int      @id
  name        String
  description String
  language    locales
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  programs    Program  @relation("program_translationsToprograms", fields: [program_id], references: [id])

  @@map("program_translations")
}

model ProgramWaitlist {
  program_id Int
  parent_id  Int
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  parents    Parent   @relation("parentsToprogram_waitlists", fields: [parent_id], references: [id])
  programs   Program  @relation("program_waitlistsToprograms", fields: [program_id], references: [id])

  @@id([parent_id, program_id])
  @@map("program_waitlists")
}

model Student {
  id                 Int               @id @default(autoincrement())
  first_name         String
  last_name          String
  allergies          String
  additional_info    String?
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  updated_at         DateTime          @default(now()) @db.Timestamptz(6)
  parent_of_students ParentOfStudent[] @relation("parent_of_studentsTostudents")
  parent_regs        ParentReg[]       @relation("parent_regsTostudents")

  @@map("students")
}

model Teacher {
  id           Int          @id @default(autoincrement())
  user_id      Int
  first_name   String
  last_name    String
  email        String?      @unique
  created_at   DateTime     @default(now()) @db.Timestamptz(6)
  updated_at   DateTime     @default(now()) @db.Timestamptz(6)
  users        User         @relation("teachersTousers", fields: [user_id], references: [id])
  teacher_regs TeacherReg[] @relation("teacher_regsToteachers")

  @@map("teachers")
}

model TeacherReg {
  teacher_id Int
  program_id Int
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  programs   Program  @relation("programsToteacher_regs", fields: [program_id], references: [id])
  teachers   Teacher  @relation("teacher_regsToteachers", fields: [teacher_id], references: [id])

  @@id([program_id, teacher_id])
  @@map("teacher_regs")
}

model User {
  id             Int            @id @default(autoincrement())
  name           String?
  email          String?        @unique
  email_verified DateTime?      @db.Timestamptz(6)
  image          String?
  created_at     DateTime       @default(now()) @db.Timestamptz(6)
  updated_at     DateTime       @default(now()) @db.Timestamptz(6)
  parents        Parent[]       @relation("parentsTousers")
  program_admins ProgramAdmin[] @relation("program_adminsTousers")
  teachers       Teacher[]      @relation("teachersTousers")
  volunteers     Volunteer[]    @relation("usersTovolunteers")

  @@map("users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz(6)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  @@map("verification_requests")
}

model Volunteer {
  id                   Int            @id @default(autoincrement())
  user_id              Int
  first_name           String
  last_name            String
  email                String?        @unique
  phone_number         String?        @db.VarChar(50)
  is_valid             Boolean?       @default(false)
  background_form_link String?
  address_line1        String?
  address_line2        String?
  postal_code          String?        @db.VarChar(10)
  city_name            String?
  province             provinces?
  preferred_language   locales?
  created_at           DateTime       @default(now()) @db.Timestamptz(6)
  updated_at           DateTime       @default(now()) @db.Timestamptz(6)
  users                User           @relation("usersTovolunteers", fields: [user_id], references: [id])
  volunteer_regs       VolunteerReg[] @relation("volunteer_regsTovolunteers")

  @@map("volunteers")
}

model VolunteerReg {
  volunteer_id Int
  program_id   Int
  is_valid     Boolean?  @default(false)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  programs     Program   @relation("programsTovolunteer_regs", fields: [program_id], references: [id])
  volunteers   Volunteer @relation("volunteer_regsTovolunteers", fields: [volunteer_id], references: [id])

  @@id([volunteer_id, program_id])
  @@map("volunteer_regs")
}

model ProgramAdmin {
  id         Int      @id @default(autoincrement())
  user_id    Int
  first_name String
  last_name  String
  email      String?  @unique
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  users      User     @relation("program_adminsTousers", fields: [user_id], references: [id])

  @@map("program_admins")
}

enum locales {
  zh
  en
  ja
  ko
}

enum provinces {
  NL
  PE
  NS
  NB
  QC
  ON
  MB
  SK
  AB
  BC
  YT
  NT
  NU
}

enum weekdays {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}
